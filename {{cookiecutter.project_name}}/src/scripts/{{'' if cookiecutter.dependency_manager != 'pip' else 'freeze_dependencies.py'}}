"""Freeze dependencies into pyproject.toml."""

from pathlib import Path

import toml
from pip._internal.operations.freeze import freeze


class TomlSplitListsEncoder(toml.TomlEncoder):
    """Custom encoder to split lists into multiple lines."""

    def dump_list(self, v) -> str:
        """Docstring to shut up ruff."""
        if len(v) == 0:
            return "[]"
        else:
            retval = "["
            for u in v:
                retval += "\n    " + self.dump_value(u) + ","
            retval += "\n]"
            return retval

    def dump_value(self, v) -> str:
        """Convert an object to a string representation.

        In case the object is a string then we ensure that newlines are preserved.

        Args:
            v:
                The object to be dumped.

        Returns:
            A string representation of the object.
        """
        dump = super().dump_value(v)
        if isinstance(v, str) and "\\n" in dump:
            dump = dump.replace("\\n", "\n")
            retval = "'''\n"
            for line in v.splitlines():
                retval += line + "\n"
            retval += "'''"
            return retval
        return dump


def main() -> None:
    """Freeze dependencies into pyproject.toml."""
    dependencies = list(freeze(exclude_editable=True))
    pyproject_content = toml.load("pyproject.toml")
    pyproject_content["project"]["dependencies"] = dependencies
    encoder = TomlSplitListsEncoder(pyproject_content.__class__)
    with Path("pyproject.toml").open("w") as pyproject_toml:
        toml.dump(pyproject_content, pyproject_toml, encoder=encoder)


if __name__ == "__main__":
    main()
